// Code generated by modus-moonbit-build. DO NOT EDIT.

///|
pub fn __modus_test_array_input_byte(val : Array[Byte]) -> Unit!Error {
  try {
    test_array_input_byte!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_array_output_byte() -> Array[Byte] {
  test_array_output_byte()
}

///|
pub fn __modus_test_array_input_string(val : Array[String]) -> Unit!Error {
  try {
    test_array_input_string!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_array_output_string() -> Array[String] {
  test_array_output_string()
}

///|
pub fn __modus_test_array_input_string_none(val : Array[String]?) -> Unit!Error {
  try {
    test_array_input_string_none!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_array_output_string_none() -> Array[String]? {
  test_array_output_string_none()
}

///|
pub fn __modus_test_array_input_string_empty(val : Array[String]) -> Unit!Error {
  try {
    test_array_input_string_empty!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_array_output_string_empty() -> Array[String] {
  test_array_output_string_empty()
}

///|
pub fn __modus_test_array_input_int_empty(val : Array[Int]) -> Unit!Error {
  try {
    test_array_input_int_empty!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_array_output_int_empty() -> Array[Int] {
  test_array_output_int_empty()
}

///|
pub fn __modus_test_array_input_string_option(
  val : Array[String?]
) -> Unit!Error {
  try {
    test_array_input_string_option!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_array_output_string_option() -> Array[String?] {
  test_array_output_string_option()
}

///|
pub fn __modus_test_array_input_int_option(val : Array[Int?]) -> Unit!Error {
  try {
    test_array_input_int_option!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_array_output_int_option() -> Array[Int?] {
  test_array_output_int_option()
}

///|
pub fn __modus_test2d_array_input_string(
  val : Array[Array[String]]
) -> Unit!Error {
  try {
    test2d_array_input_string!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test2d_array_output_string() -> Array[Array[String]] {
  test2d_array_output_string()
}

///|
pub fn __modus_test2d_array_input_string_none(
  val : Array[Array[String]]?
) -> Unit!Error {
  try {
    test2d_array_input_string_none!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test2d_array_output_string_none() -> Array[Array[String]]? {
  test2d_array_output_string_none()
}

///|
pub fn __modus_test2d_array_input_string_empty(
  val : Array[Array[String]]
) -> Unit!Error {
  try {
    test2d_array_input_string_empty!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test2d_array_output_string_empty() -> Array[Array[String]] {
  test2d_array_output_string_empty()
}

///|
pub fn __modus_test2d_array_input_string_inner_empty(
  val : Array[Array[String]]
) -> Unit!Error {
  try {
    test2d_array_input_string_inner_empty!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test2d_array_output_string_inner_empty() -> Array[Array[String]] {
  test2d_array_output_string_inner_empty()
}

///|
pub fn __modus_test2d_array_input_string_inner_none(
  val : Array[Array[String]?]
) -> Unit!Error {
  try {
    test2d_array_input_string_inner_none!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test2d_array_output_string_inner_none() -> Array[Array[String]?] {
  test2d_array_output_string_inner_none()
}

///|
pub fn __modus_test_fixedarray_input0_byte(
  val : FixedArray[Byte]
) -> Unit!Error {
  try {
    test_fixedarray_input0_byte!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output0_byte() -> FixedArray[Byte] {
  test_fixedarray_output0_byte()
}

///|
pub fn __modus_test_fixedarray_input0_string(
  val : FixedArray[String]
) -> Unit!Error {
  try {
    test_fixedarray_input0_string!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output0_string() -> FixedArray[String] {
  test_fixedarray_output0_string()
}

///|
pub fn __modus_test_fixedarray_input0_string_option(
  val : FixedArray[String?]
) -> Unit!Error {
  try {
    test_fixedarray_input0_string_option!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output0_string_option() -> FixedArray[String?] {
  test_fixedarray_output0_string_option()
}

///|
pub fn __modus_test_fixedarray_input0_int_option(
  val : FixedArray[Int?]
) -> Unit!Error {
  try {
    test_fixedarray_input0_int_option!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output0_int_option() -> FixedArray[Int?] {
  test_fixedarray_output0_int_option()
}

///|
pub fn __modus_test_fixedarray_input1_byte(
  val : FixedArray[Byte]
) -> Unit!Error {
  try {
    test_fixedarray_input1_byte!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output1_byte() -> FixedArray[Byte] {
  test_fixedarray_output1_byte()
}

///|
pub fn __modus_test_fixedarray_input1_string(
  val : FixedArray[String]
) -> Unit!Error {
  try {
    test_fixedarray_input1_string!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output1_string() -> FixedArray[String] {
  test_fixedarray_output1_string()
}

///|
pub fn __modus_test_fixedarray_input1_string_option(
  val : FixedArray[String?]
) -> Unit!Error {
  try {
    test_fixedarray_input1_string_option!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output1_string_option() -> FixedArray[String?] {
  test_fixedarray_output1_string_option()
}

///|
pub fn __modus_get_string_option_fixedarray1() -> FixedArray[String?] {
  get_string_option_fixedarray1()
}

///|
pub fn __modus_test_fixedarray_input1_int_option(
  val : FixedArray[Int?]
) -> Unit!Error {
  try {
    test_fixedarray_input1_int_option!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output1_int_option() -> FixedArray[Int?] {
  test_fixedarray_output1_int_option()
}

///|
pub fn __modus_get_int_option_fixedarray1() -> FixedArray[Int?] {
  get_int_option_fixedarray1()
}

///|
pub fn __modus_test_fixedarray_input2_byte(
  val : FixedArray[Byte]
) -> Unit!Error {
  try {
    test_fixedarray_input2_byte!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output2_byte() -> FixedArray[Byte] {
  test_fixedarray_output2_byte()
}

///|
pub fn __modus_test_fixedarray_input2_string(
  val : FixedArray[String]
) -> Unit!Error {
  try {
    test_fixedarray_input2_string!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output2_string() -> FixedArray[String] {
  test_fixedarray_output2_string()
}

///|
pub fn __modus_test_fixedarray_input2_string_option(
  val : FixedArray[String?]
) -> Unit!Error {
  try {
    test_fixedarray_input2_string_option!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output2_string_option() -> FixedArray[String?] {
  test_fixedarray_output2_string_option()
}

///|
pub fn __modus_get_string_option_array2() -> FixedArray[String?] {
  get_string_option_array2()
}

///|
pub fn __modus_test_fixedarray_input2_int_option(
  val : FixedArray[Int?]
) -> Unit!Error {
  try {
    test_fixedarray_input2_int_option!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output2_int_option() -> FixedArray[Int?] {
  test_fixedarray_output2_int_option()
}

///|
pub fn __modus_getIntPtrArray2() -> FixedArray[Int?] {
  getIntPtrArray2()
}

///|
pub fn __modus_test_fixedarray_input2_struct(
  val : FixedArray[TestStruct2]
) -> Unit!Error {
  try {
    test_fixedarray_input2_struct!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output2_struct() -> FixedArray[TestStruct2] {
  test_fixedarray_output2_struct()
}

///|
pub fn __modus_test_fixedarray_input2_struct_option(
  val : FixedArray[TestStruct2?]
) -> Unit!Error {
  try {
    test_fixedarray_input2_struct_option!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output2_struct_option() ->
     FixedArray[TestStruct2?] {
  test_fixedarray_output2_struct_option()
}

///|
pub fn __modus_test_fixedarray_input2_map(
  val : FixedArray[Map[String, String]]
) -> Unit!Error {
  try {
    test_fixedarray_input2_map!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output2_map() -> FixedArray[Map[String, String]] {
  test_fixedarray_output2_map()
}

///|
pub fn __modus_test_fixedarray_input2_map_option(
  val : FixedArray[Map[String, String]?]
) -> Unit!Error {
  try {
    test_fixedarray_input2_map_option!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_fixedarray_output2_map_option() ->
     FixedArray[Map[String, String]?] {
  test_fixedarray_output2_map_option()
}

///|
pub fn __modus_get_map_array2() -> FixedArray[Map[String, String]] {
  get_map_array2()
}

///|
pub fn __modus_getMapPtrArray2() -> FixedArray[Map[String, String]?] {
  getMapPtrArray2()
}

///|
pub fn __modus_test_option_fixedarray_input1_int(
  val : FixedArray[Int]?
) -> Unit!Error {
  try {
    test_option_fixedarray_input1_int!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_option_fixedarray_output1_int() -> FixedArray[Int]? {
  test_option_fixedarray_output1_int()
}

///|
pub fn __modus_get_option_int_fixedarray1() -> FixedArray[Int]? {
  get_option_int_fixedarray1()
}

///|
pub fn __modus_test_option_fixedarray_input2_int(
  val : FixedArray[Int]?
) -> Unit!Error {
  try {
    test_option_fixedarray_input2_int!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_option_fixedarray_output2_int() -> FixedArray[Int]? {
  test_option_fixedarray_output2_int()
}

///|
pub fn __modus_get_option_int_fixedarray2() -> FixedArray[Int]? {
  get_option_int_fixedarray2()
}

///|
pub fn __modus_test_option_fixedarray_input1_string(
  val : FixedArray[String]?
) -> Unit!Error {
  try {
    test_option_fixedarray_input1_string!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_option_fixedarray_output1_string() -> FixedArray[String]? {
  test_option_fixedarray_output1_string()
}

///|
pub fn __modus_get_option_string_fixedarray1() -> FixedArray[String]? {
  get_option_string_fixedarray1()
}

///|
pub fn __modus_get_option_string_fixedarray2() -> FixedArray[String]? {
  get_option_string_fixedarray2()
}

///|
pub fn __modus_test_option_fixedarray_input2_string(
  val : FixedArray[String]?
) -> Unit!Error {
  try {
    test_option_fixedarray_input2_string!(val)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_option_fixedarray_output2_string() -> FixedArray[String]? {
  test_option_fixedarray_output2_string()
}

///|
pub fn __modus_add(a : Int, b : Int) -> Int {
  add(a, b)
}

///|
pub fn __modus_echo1(message : String?) -> String? {
  echo1(message)
}

///|
pub fn __modus_echo2(message : String?) -> String? {
  echo2(message)
}

///|
pub fn __modus_echo3(message : String?) -> String? {
  echo3(message)
}

///|
pub fn __modus_echo4(message : String?) -> String? {
  echo4(message)
}

///|
pub fn __modus_encode_strings1(items : Array[String]?) -> String? {
  encode_strings1(items)
}

///|
pub fn __modus_encode_strings2(items : Array[String?]?) -> String? {
  encode_strings2(items)
}

///|
pub fn __modus_test_http_response_headers(r : HttpResponse?) -> Unit {
  test_http_response_headers(r)
}

///|
pub fn __modus_test_http_headers(h : HttpHeaders) -> Unit {
  test_http_headers(h)
}

///|
pub fn __modus_test_http_header_map(m : Map[String, HttpHeader?]) -> Unit {
  test_http_header_map(m)
}

///|
pub fn __modus_test_http_header(h : HttpHeader?) -> Unit {
  test_http_header(h)
}

///|
pub fn __modus_test_map_input_string_string(
  m : Map[String, String]
) -> Unit!Error {
  try {
    test_map_input_string_string!(m)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_map_option_input_string_string(
  m : Map[String, String]?
) -> Unit!Error {
  try {
    test_map_option_input_string_string!(m)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_map_output_string_string() -> Map[String, String] {
  test_map_output_string_string()
}

///|
pub fn __modus_test_map_option_output_string_string() -> Map[String, String]? {
  test_map_option_output_string_string()
}

///|
pub fn __modus_test_iterate_map_string_string(m : Map[String, String]) -> Unit {
  test_iterate_map_string_string(m)
}

///|
pub fn __modus_test_map_lookup_string_string(
  m : Map[String, String],
  key : String
) -> String {
  test_map_lookup_string_string(m, key)
}

///|
pub fn __modus_test_struct_containing_map_input_string_string(
  s : TestStructWithMap
) -> Unit!Error {
  try {
    test_struct_containing_map_input_string_string!(s)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_containing_map_output_string_string() ->
     TestStructWithMap {
  test_struct_containing_map_output_string_string()
}

///|
pub fn __modus_test_map_input_int_float(m : Map[Int, Float]) -> Unit!Error {
  try {
    test_map_input_int_float!(m)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_map_output_int_float() -> Map[Int, Float] {
  test_map_output_int_float()
}

///|
pub fn __modus_test_map_input_int_double(m : Map[Int, Double]) -> Unit!Error {
  try {
    test_map_input_int_double!(m)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_map_output_int_double() -> Map[Int, Double] {
  test_map_output_int_double()
}

///|
pub fn __modus_test_generate_map_string_string_output() -> Map[String, String] {
  test_generate_map_string_string_output()
}

///|
pub fn __modus_test_bool_input_false(b : Bool) -> Unit!Error {
  try {
    test_bool_input_false!(b)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_bool_input_true(b : Bool) -> Unit!Error {
  try {
    test_bool_input_true!(b)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_bool_output_false() -> Bool {
  test_bool_output_false()
}

///|
pub fn __modus_test_bool_output_true() -> Bool {
  test_bool_output_true()
}

///|
pub fn __modus_test_bool_option_input_false(b : Bool?) -> Unit!Error {
  try {
    test_bool_option_input_false!(b)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_bool_option_input_true(b : Bool?) -> Unit!Error {
  try {
    test_bool_option_input_true!(b)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_bool_option_input_none(b : Bool?) -> Unit!Error {
  try {
    test_bool_option_input_none!(b)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_bool_option_output_false() -> Bool? {
  test_bool_option_output_false()
}

///|
pub fn __modus_test_bool_option_output_true() -> Bool? {
  test_bool_option_output_true()
}

///|
pub fn __modus_test_bool_option_output_none() -> Bool? {
  test_bool_option_output_none()
}

///|
pub fn __modus_test_byte_input_min(b : Byte) -> Unit!Error {
  try {
    test_byte_input_min!(b)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_byte_input_max(b : Byte) -> Unit!Error {
  try {
    test_byte_input_max!(b)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_byte_output_min() -> Byte {
  test_byte_output_min()
}

///|
pub fn __modus_test_byte_output_max() -> Byte {
  test_byte_output_max()
}

///|
pub fn __modus_test_byte_option_input_min(b : Byte?) -> Unit!Error {
  try {
    test_byte_option_input_min!(b)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_byte_option_input_max(b : Byte?) -> Unit!Error {
  try {
    test_byte_option_input_max!(b)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_byte_option_input_none(b : Byte?) -> Unit!Error {
  try {
    test_byte_option_input_none!(b)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_byte_option_output_min() -> Byte? {
  test_byte_option_output_min()
}

///|
pub fn __modus_test_byte_option_output_max() -> Byte? {
  test_byte_option_output_max()
}

///|
pub fn __modus_test_byte_option_output_none() -> Byte? {
  test_byte_option_output_none()
}

///|
pub fn __modus_test_char_input_min(c : Char) -> Unit!Error {
  try {
    test_char_input_min!(c)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_char_input_max(c : Char) -> Unit!Error {
  try {
    test_char_input_max!(c)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_char_output_min() -> Char {
  test_char_output_min()
}

///|
pub fn __modus_test_char_output_max() -> Char {
  test_char_output_max()
}

///|
pub fn __modus_test_char_option_input_min(c : Char?) -> Unit!Error {
  try {
    test_char_option_input_min!(c)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_char_option_input_max(c : Char?) -> Unit!Error {
  try {
    test_char_option_input_max!(c)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_char_option_input_none(c : Char?) -> Unit!Error {
  try {
    test_char_option_input_none!(c)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_char_option_output_min() -> Char? {
  test_char_option_output_min()
}

///|
pub fn __modus_test_char_option_output_max() -> Char? {
  test_char_option_output_max()
}

///|
pub fn __modus_test_char_option_output_none() -> Char? {
  test_char_option_output_none()
}

///|
pub fn __modus_test_int_input_min(n : Int) -> Unit!Error {
  try {
    test_int_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int_input_max(n : Int) -> Unit!Error {
  try {
    test_int_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int_output_min() -> Int {
  test_int_output_min()
}

///|
pub fn __modus_test_int_output_max() -> Int {
  test_int_output_max()
}

///|
pub fn __modus_test_int_option_input_min(n : Int?) -> Unit!Error {
  try {
    test_int_option_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int_option_input_max(n : Int?) -> Unit!Error {
  try {
    test_int_option_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int_option_input_none(n : Int?) -> Unit!Error {
  try {
    test_int_option_input_none!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int_option_output_min() -> Int? {
  test_int_option_output_min()
}

///|
pub fn __modus_test_int_option_output_max() -> Int? {
  test_int_option_output_max()
}

///|
pub fn __modus_test_int_option_output_none() -> Int? {
  test_int_option_output_none()
}

///|
pub fn __modus_test_int16_input_min(n : Int16) -> Unit!Error {
  try {
    test_int16_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int16_input_max(n : Int16) -> Unit!Error {
  try {
    test_int16_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int16_output_min() -> Int16 {
  test_int16_output_min()
}

///|
pub fn __modus_test_int16_output_max() -> Int16 {
  test_int16_output_max()
}

///|
pub fn __modus_test_int16_option_input_min(n : Int16?) -> Unit!Error {
  try {
    test_int16_option_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int16_option_input_max(n : Int16?) -> Unit!Error {
  try {
    test_int16_option_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int16_option_input_none(n : Int16?) -> Unit!Error {
  try {
    test_int16_option_input_none!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int16_option_output_min() -> Int16? {
  test_int16_option_output_min()
}

///|
pub fn __modus_test_int16_option_output_max() -> Int16? {
  test_int16_option_output_max()
}

///|
pub fn __modus_test_int16_option_output_none() -> Int16? {
  test_int16_option_output_none()
}

///|
pub fn __modus_test_int64_input_min(n : Int64) -> Unit!Error {
  try {
    test_int64_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int64_input_max(n : Int64) -> Unit!Error {
  try {
    test_int64_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int64_output_min() -> Int64 {
  test_int64_output_min()
}

///|
pub fn __modus_test_int64_output_max() -> Int64 {
  test_int64_output_max()
}

///|
pub fn __modus_test_int64_option_input_min(n : Int64?) -> Unit!Error {
  try {
    test_int64_option_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int64_option_input_max(n : Int64?) -> Unit!Error {
  try {
    test_int64_option_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int64_option_input_none(n : Int64?) -> Unit!Error {
  try {
    test_int64_option_input_none!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_int64_option_output_min() -> Int64? {
  test_int64_option_output_min()
}

///|
pub fn __modus_test_int64_option_output_max() -> Int64? {
  test_int64_option_output_max()
}

///|
pub fn __modus_test_int64_option_output_none() -> Int64? {
  test_int64_option_output_none()
}

///|
pub fn __modus_test_uint_input_min(n : UInt) -> Unit!Error {
  try {
    test_uint_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint_input_max(n : UInt) -> Unit!Error {
  try {
    test_uint_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint_output_min() -> UInt {
  test_uint_output_min()
}

///|
pub fn __modus_test_uint_output_max() -> UInt {
  test_uint_output_max()
}

///|
pub fn __modus_test_uint_option_input_min(n : UInt?) -> Unit!Error {
  try {
    test_uint_option_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint_option_input_max(n : UInt?) -> Unit!Error {
  try {
    test_uint_option_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint_option_input_none(n : UInt?) -> Unit!Error {
  try {
    test_uint_option_input_none!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint_option_output_min() -> UInt? {
  test_uint_option_output_min()
}

///|
pub fn __modus_test_uint_option_output_max() -> UInt? {
  test_uint_option_output_max()
}

///|
pub fn __modus_test_uint_option_output_none() -> UInt? {
  test_uint_option_output_none()
}

///|
pub fn __modus_test_uint16_input_min(n : UInt16) -> Unit!Error {
  try {
    test_uint16_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint16_input_max(n : UInt16) -> Unit!Error {
  try {
    test_uint16_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint16_output_min() -> UInt16 {
  test_uint16_output_min()
}

///|
pub fn __modus_test_uint16_output_max() -> UInt16 {
  test_uint16_output_max()
}

///|
pub fn __modus_test_uint16_option_input_min(n : UInt16?) -> Unit!Error {
  try {
    test_uint16_option_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint16_option_input_max(n : UInt16?) -> Unit!Error {
  try {
    test_uint16_option_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint16_option_input_none(n : UInt16?) -> Unit!Error {
  try {
    test_uint16_option_input_none!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint16_option_output_min() -> UInt16? {
  test_uint16_option_output_min()
}

///|
pub fn __modus_test_uint16_option_output_max() -> UInt16? {
  test_uint16_option_output_max()
}

///|
pub fn __modus_test_uint16_option_output_none() -> UInt16? {
  test_uint16_option_output_none()
}

///|
pub fn __modus_test_uint64_input_min(n : UInt64) -> Unit!Error {
  try {
    test_uint64_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint64_input_max(n : UInt64) -> Unit!Error {
  try {
    test_uint64_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint64_output_min() -> UInt64 {
  test_uint64_output_min()
}

///|
pub fn __modus_test_uint64_output_max() -> UInt64 {
  test_uint64_output_max()
}

///|
pub fn __modus_test_uint64_option_input_min(n : UInt64?) -> Unit!Error {
  try {
    test_uint64_option_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint64_option_input_max(n : UInt64?) -> Unit!Error {
  try {
    test_uint64_option_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint64_option_input_none(n : UInt64?) -> Unit!Error {
  try {
    test_uint64_option_input_none!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_uint64_option_output_min() -> UInt64? {
  test_uint64_option_output_min()
}

///|
pub fn __modus_test_uint64_option_output_max() -> UInt64? {
  test_uint64_option_output_max()
}

///|
pub fn __modus_test_uint64_option_output_none() -> UInt64? {
  test_uint64_option_output_none()
}

///|
pub fn __modus_test_float_input_min(n : Float) -> Unit!Error {
  try {
    test_float_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_float_input_max(n : Float) -> Unit!Error {
  try {
    test_float_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_float_output_min() -> Float {
  test_float_output_min()
}

///|
pub fn __modus_test_float_output_max() -> Float {
  test_float_output_max()
}

///|
pub fn __modus_test_float_option_input_min(n : Float?) -> Unit!Error {
  try {
    test_float_option_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_float_option_input_max(n : Float?) -> Unit!Error {
  try {
    test_float_option_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_float_option_input_none(n : Float?) -> Unit!Error {
  try {
    test_float_option_input_none!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_float_option_output_min() -> Float? {
  test_float_option_output_min()
}

///|
pub fn __modus_test_float_option_output_max() -> Float? {
  test_float_option_output_max()
}

///|
pub fn __modus_test_float_option_output_none() -> Float? {
  test_float_option_output_none()
}

///|
pub fn __modus_test_double_input_min(n : Double) -> Unit!Error {
  try {
    test_double_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_double_input_max(n : Double) -> Unit!Error {
  try {
    test_double_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_double_output_min() -> Double {
  test_double_output_min()
}

///|
pub fn __modus_test_double_output_max() -> Double {
  test_double_output_max()
}

///|
pub fn __modus_test_double_option_input_min(n : Double?) -> Unit!Error {
  try {
    test_double_option_input_min!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_double_option_input_max(n : Double?) -> Unit!Error {
  try {
    test_double_option_input_max!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_double_option_input_none(n : Double?) -> Unit!Error {
  try {
    test_double_option_input_none!(n)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_double_option_output_min() -> Double? {
  test_double_option_output_min()
}

///|
pub fn __modus_test_double_option_output_max() -> Double? {
  test_double_option_output_max()
}

///|
pub fn __modus_test_double_option_output_none() -> Double? {
  test_double_option_output_none()
}

///|
pub fn __modus_test_string_input(s : String) -> Unit!Error {
  try {
    test_string_input!(s)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_string_option_input(s : String?) -> Unit!Error {
  try {
    test_string_option_input!(s)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_string_option_input_none(s : String?) -> Unit!Error {
  try {
    test_string_option_input_none!(s)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_string_output() -> String {
  test_string_output()
}

///|
pub fn __modus_test_string_option_output() -> String? {
  test_string_option_output()
}

///|
pub fn __modus_test_string_option_output_none() -> String? {
  test_string_option_output_none()
}

///|
pub fn __modus_test_struct_input1(o : TestStruct1) -> Unit!Error {
  try {
    test_struct_input1!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_input2(o : TestStruct2) -> Unit!Error {
  try {
    test_struct_input2!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_input3(o : TestStruct3) -> Unit!Error {
  try {
    test_struct_input3!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_input4(o : TestStruct4) -> Unit!Error {
  try {
    test_struct_input4!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_input5(o : TestStruct5) -> Unit!Error {
  try {
    test_struct_input5!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_input4_with_none(o : TestStruct4) -> Unit!Error {
  try {
    test_struct_input4_with_none!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_recursive_struct_input(
  o : TestRecursiveStruct
) -> Unit!Error {
  try {
    test_recursive_struct_input!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input1(o : TestStruct1?) -> Unit!Error {
  try {
    test_struct_option_input1!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input2(o : TestStruct2?) -> Unit!Error {
  try {
    test_struct_option_input2!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input3(o : TestStruct3?) -> Unit!Error {
  try {
    test_struct_option_input3!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input4(o : TestStruct4?) -> Unit!Error {
  try {
    test_struct_option_input4!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input5(o : TestStruct5?) -> Unit!Error {
  try {
    test_struct_option_input5!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input4_with_none(
  o : TestStruct4?
) -> Unit!Error {
  try {
    test_struct_option_input4_with_none!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_recursive_struct_option_input(
  o : TestRecursiveStruct?
) -> Unit!Error {
  try {
    test_recursive_struct_option_input!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input1_none(o : TestStruct1?) -> Unit!Error {
  try {
    test_struct_option_input1_none!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input2_none(o : TestStruct2?) -> Unit!Error {
  try {
    test_struct_option_input2_none!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input3_none(o : TestStruct3?) -> Unit!Error {
  try {
    test_struct_option_input3_none!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input4_none(o : TestStruct4?) -> Unit!Error {
  try {
    test_struct_option_input4_none!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_option_input5_none(o : TestStruct5?) -> Unit!Error {
  try {
    test_struct_option_input5_none!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_recursive_struct_option_input_none(
  o : TestRecursiveStruct?
) -> Unit!Error {
  try {
    test_recursive_struct_option_input_none!(o)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_struct_output1() -> TestStruct1 {
  test_struct_output1()
}

///|
pub fn __modus_test_struct_output1_map() -> TestStruct1_map {
  test_struct_output1_map()
}

///|
pub fn __modus_test_struct_output2() -> TestStruct2 {
  test_struct_output2()
}

///|
pub fn __modus_test_struct_output2_map() -> TestStruct2_map {
  test_struct_output2_map()
}

///|
pub fn __modus_test_struct_output3() -> TestStruct3 {
  test_struct_output3()
}

///|
pub fn __modus_test_struct_output3_map() -> TestStruct3_map {
  test_struct_output3_map()
}

///|
pub fn __modus_test_struct_output4() -> TestStruct4 {
  test_struct_output4()
}

///|
pub fn __modus_test_struct_output4_map() -> TestStruct4_map {
  test_struct_output4_map()
}

///|
pub fn __modus_test_struct_output5() -> TestStruct5 {
  test_struct_output5()
}

///|
pub fn __modus_test_struct_output5_map() -> TestStruct5_map {
  test_struct_output5_map()
}

///|
pub fn __modus_test_struct_output4_with_none() -> TestStruct4 {
  test_struct_output4_with_none()
}

///|
pub fn __modus_test_struct_output4_map_with_none() -> TestStruct4_map {
  test_struct_output4_map_with_none()
}

///|
pub fn __modus_test_recursive_struct_output() -> TestRecursiveStruct {
  test_recursive_struct_output()
}

///|
pub fn __modus_test_recursive_struct_output_map() -> TestRecursiveStruct_map {
  test_recursive_struct_output_map()
}

///|
pub fn __modus_test_struct_option_output1() -> TestStruct1? {
  test_struct_option_output1()
}

///|
pub fn __modus_test_struct_option_output1_map() -> TestStruct1_map? {
  test_struct_option_output1_map()
}

///|
pub fn __modus_test_struct_option_output2() -> TestStruct2? {
  test_struct_option_output2()
}

///|
pub fn __modus_test_struct_option_output2_map() -> TestStruct2_map? {
  test_struct_option_output2_map()
}

///|
pub fn __modus_test_struct_option_output3() -> TestStruct3? {
  test_struct_option_output3()
}

///|
pub fn __modus_test_struct_option_output3_map() -> TestStruct3_map? {
  test_struct_option_output3_map()
}

///|
pub fn __modus_test_struct_option_output4() -> TestStruct4? {
  test_struct_option_output4()
}

///|
pub fn __modus_test_struct_option_output4_map() -> TestStruct4_map? {
  test_struct_option_output4_map()
}

///|
pub fn __modus_test_struct_option_output5() -> TestStruct5? {
  test_struct_option_output5()
}

///|
pub fn __modus_test_struct_option_output5_map() -> TestStruct5_map? {
  test_struct_option_output5_map()
}

///|
pub fn __modus_test_struct_option_output4_with_none() -> TestStruct4? {
  test_struct_option_output4_with_none()
}

///|
pub fn __modus_test_struct_option_output4_map_with_none() -> TestStruct4_map? {
  test_struct_option_output4_map_with_none()
}

///|
pub fn __modus_test_recursive_struct_option_output() -> TestRecursiveStruct? {
  test_recursive_struct_option_output()
}

///|
pub fn __modus_test_recursive_struct_option_output_map() ->
     TestRecursiveStruct_map? {
  test_recursive_struct_option_output_map()
}

///|
pub fn __modus_test_struct_option_output1_none() -> TestStruct1? {
  test_struct_option_output1_none()
}

///|
pub fn __modus_test_struct_option_output2_none() -> TestStruct2? {
  test_struct_option_output2_none()
}

///|
pub fn __modus_test_struct_option_output3_none() -> TestStruct3? {
  test_struct_option_output3_none()
}

///|
pub fn __modus_test_struct_option_output4_none() -> TestStruct4? {
  test_struct_option_output4_none()
}

///|
pub fn __modus_test_struct_option_output5_none() -> TestStruct5? {
  test_struct_option_output5_none()
}

///|
pub fn __modus_test_recursive_struct_option_output_none() ->
     TestRecursiveStruct? {
  test_recursive_struct_option_output_none()
}

///|
pub fn __modus_test_time_input(t : @time.ZonedDateTime) -> Unit!Error {
  try {
    test_time_input!(t)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_time_option_input(t : @time.ZonedDateTime?) -> Unit!Error {
  try {
    test_time_option_input!(t)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_call_test_time_option_input_some() -> @time.ZonedDateTime? {
  call_test_time_option_input_some()
}

///|
pub fn __modus_call_test_time_option_input_none() -> @time.ZonedDateTime? {
  call_test_time_option_input_none()
}

///|
pub fn __modus_test_time_option_input_style2(
  t? : @time.ZonedDateTime
) -> Unit!Error {
  try {
    test_time_option_input_style2!(t?)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_time_option_input_none(
  t : @time.ZonedDateTime?
) -> Unit!Error {
  try {
    test_time_option_input_none!(t)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_time_option_input_none_style2(
  t? : @time.ZonedDateTime
) -> Unit!Error {
  try {
    test_time_option_input_none_style2!(t?)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_time_output() -> @time.ZonedDateTime {
  test_time_output()
}

///|
pub fn __modus_test_time_option_output() -> @time.ZonedDateTime? {
  test_time_option_output()
}

///|
pub fn __modus_test_time_option_output_none() -> @time.ZonedDateTime? {
  test_time_option_output_none()
}

///|
pub fn __modus_test_duration_input(d : @time.Duration) -> Unit!Error {
  try {
    test_duration_input!(d)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_duration_option_input(d : @time.Duration?) -> Unit!Error {
  try {
    test_duration_option_input!(d)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_duration_option_input_style2(
  d? : @time.Duration
) -> Unit!Error {
  try {
    test_duration_option_input_style2!(d?)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_duration_option_input_none(
  d : @time.Duration?
) -> Unit!Error {
  try {
    test_duration_option_input_none!(d)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_duration_option_input_none_style2(
  d? : @time.Duration
) -> Unit!Error {
  try {
    test_duration_option_input_none_style2!(d?)
  } catch {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

///|
pub fn __modus_test_duration_output() -> @time.Duration {
  test_duration_output()
}

///|
pub fn __modus_test_duration_option_output() -> @time.Duration? {
  test_duration_option_output()
}

///|
pub fn __modus_test_duration_option_output_none() -> @time.Duration? {
  test_duration_option_output_none()
}

///|
pub fn __modus_test_tuple_output() -> (Int, Bool, String) {
  test_tuple_output()
}
