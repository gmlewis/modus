package modus:collections

// Enum for collection status
enum collection-status {
    success,
    error,
}

// Record type for mutation results
record collection-mutation-result {
    collection: string,
    status: string,
    error: string,
    operation: string,
    keys: list<string>,
}

// Record type for search method mutation results
record search-method-mutation-result {
    collection: string,
    status: string,
    error: string,
    operation: string,
    search-method: string,
}

// Record type for search result objects
record collection-search-result-object {
    namespace: string,
    key: string,
    text: string,
    labels: list<string>,
    distance: float64,
    score: float64,
}

// Record type for search results
record collection-search-result {
    collection: string,
    status: string,
    error: string,
    search-method: string,
    objects: list<collection-search-result-object>,
}

// Record type for classification label objects
record collection-classification-label-object {
    label: string,
    confidence: float64,
}

// Record type for classification result objects
record collection-classification-result-object {
    key: string,
    labels: list<string>,
    distance: float64,
    score: float64,
}

// Record type for classification results
record collection-classification-result {
    collection: string,
    status: string,
    error: string,
    search-method: string,
    labels-result: list<collection-classification-label-object>,
    cluster: list<collection-classification-result-object>,
}

// Main collections interface
interface collections {
    // Upsert documents into a collection
    upsert: func(
        collection: string,
        namespace: string,
        keys: list<string>,
        texts: list<string>,
        labels: list<list<string>>
    ) -> option<collection-mutation-result>

    // Delete a document from a collection
    delete: func(
        collection: string,
        namespace: string,
        key: string
    ) -> option<collection-mutation-result>

    // Search documents in a collection
    search: func(
        collection: string,
        namespaces: list<string>,
        search-method: string,
        text: string,
        limit: s32,
        return-text: bool
    ) -> option<collection-search-result>

    // Classify text using a collection
    classify-text: func(
        collection: string,
        namespace: string,
        search-method: string,
        text: string
    ) -> option<collection-classification-result>

    // Recompute index for a collection
    recompute-index: func(
        collection: string,
        namespace: string,
        search-method: string
    ) -> option<search-method-mutation-result>

    // Compute distance between two documents
    compute-distance: func(
        collection: string,
        namespace: string,
        search-method: string,
        key1: string,
        key2: string
    ) -> option<collection-search-result-object>

    // Get text for a document
    get-text: func(
        collection: string,
        namespace: string,
        key: string
    ) -> option<string>

    // Dump all texts from a collection namespace
    dump-texts: func(
        collection: string,
        namespace: string
    ) -> option<map<string, string>>

    // Get all namespaces in a collection
    get-namespaces: func(
        collection: string
    ) -> option<list<string>>

    // Get vector for a document
    get-vector: func(
        collection: string,
        namespace: string,
        search-method: string,
        key: string
    ) -> option<list<float32>>

    // Get labels for a document
    get-labels: func(
        collection: string,
        namespace: string,
        key: string
    ) -> option<list<string>>

    // Search by vector
    search-by-vector: func(
        collection: string,
        namespaces: list<string>,
        search-method: string,
        vector: list<float32>,
        limit: s32,
        return-text: bool
    ) -> option<collection-search-result>
}

world collections-world {
    import collections
}
