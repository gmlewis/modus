// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!
///| Timekeeping
/// Get the resolution of a clock.
pub fn clock_res_get(clockid : UInt) -> Result[UInt64, UInt] {
  let return_area = @ffi.malloc(16)
  wasmImportClockResGet(clockid.reinterpret_as_int(), return_area)
  let lifted = match @ffi.load8_u(return_area + 0) {
    0 => Result::Ok(@ffi.load64(return_area + 8).reinterpret_as_uint64())
    1 => Result::Err(@ffi.load32(return_area + 8).reinterpret_as_uint())
    _ => panic()
  }
  @ffi.free(return_area)
  return lifted
}

///| Get the current time of a clock.
pub fn clock_time_get(
  clockid : UInt,
  precision : UInt64
) -> Result[UInt64, UInt] {
  println(
    "GML: wit/interface/wasi: clock_time_get: clockid: \{clockid}, precision: \{precision}",
  )
  let return_area = @ffi.malloc(16)
  let result = wasmImportClockTimeGet(
    clockid.reinterpret_as_int(),
    precision.reinterpret_as_int64(),
    return_area,
  )
  println("GML: wit/interface/wasi: clock_time_get: result: \{result}")
  let lifted = match @ffi.load8_u(return_area + 0) {
    0 => Result::Ok(@ffi.load64(return_area + 8).reinterpret_as_uint64())
    1 => Result::Err(@ffi.load32(return_area + 8).reinterpret_as_uint())
    _ => panic()
  }
  @ffi.free(return_area)
  return lifted
}

///| Random Number Generation
/// Fill a buffer with random data.
pub fn random_get(buf : String, buf_len : UInt) -> Result[Unit, UInt] {
  let return_area = @ffi.malloc(8)
  wasmImportRandomGet(
    @ffi.str2ptr(buf),
    buf.iter().count(),
    buf_len.reinterpret_as_int(),
    return_area,
  )
  let lifted = match @ffi.load8_u(return_area + 0) {
    0 => Result::Ok(())
    1 => Result::Err(@ffi.load32(return_area + 4).reinterpret_as_uint())
    _ => panic()
  }
  ignore(buf)
  @ffi.free(return_area)
  return lifted
}
