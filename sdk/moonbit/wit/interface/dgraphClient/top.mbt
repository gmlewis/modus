// Generated by `wit-bindgen` 0.36.0. DO NOT EDIT!

///|
pub(all) struct Query {
  query : String
  variables : String
} derive(Show, Eq)

///|
pub(all) struct Mutation {
  set_json : String
  del_json : String
  set_nquads : String
  del_nquads : String
  condition : String
} derive(Show, Eq)

///| Record types for request and response
pub(all) struct Request {
  query : Query
  mutations : Array[Mutation]
} derive(Show, Eq)

///|
pub(all) struct Response {
  json : String
  uids : String
} derive(Show, Eq)

///| Execute a query against the Dgraph database
pub fn execute_query(host_name : String, request : Request) -> Response? {
  let cleanupList : Array[@ffi.Cleanup] = []
  let ignoreList : Array[@ffi.Any] = []
  let address = @ffi.malloc(request.mutations.length() * 40)
  for index = 0; index < request.mutations.length(); index = index + 1 {
    let element : Mutation = request.mutations[index]
    let base = address + index * 40
    @ffi.store32(base + 4, element.set_json.iter().count())
    @ffi.store32(base + 0, @ffi.str2ptr(element.set_json))
    @ffi.store32(base + 12, element.del_json.iter().count())
    @ffi.store32(base + 8, @ffi.str2ptr(element.del_json))
    @ffi.store32(base + 20, element.set_nquads.iter().count())
    @ffi.store32(base + 16, @ffi.str2ptr(element.set_nquads))
    @ffi.store32(base + 28, element.del_nquads.iter().count())
    @ffi.store32(base + 24, @ffi.str2ptr(element.del_nquads))
    @ffi.store32(base + 36, element.condition.iter().count())
    @ffi.store32(base + 32, @ffi.str2ptr(element.condition))
    ignoreList.push(element.set_json)
    ignoreList.push(element.del_json)
    ignoreList.push(element.set_nquads)
    ignoreList.push(element.del_nquads)
    ignoreList.push(element.condition)
  }
  let return_area = @ffi.malloc(20)
  wasmImportExecuteQuery(
    @ffi.str2ptr(host_name),
    host_name.iter().count(),
    @ffi.str2ptr(request.query.query),
    request.query.query.iter().count(),
    @ffi.str2ptr(request.query.variables),
    request.query.variables.iter().count(),
    address,
    request.mutations.length(),
    return_area,
  )
  let lifted : Response? = match @ffi.load8_u(return_area + 0) {
    0 => Option::None
    1 => {
      ignore(@ffi.load32(return_area + 8))
      let result = @ffi.ptr2str(@ffi.load32(return_area + 4))
      ignore(@ffi.load32(return_area + 16))
      let result4 = @ffi.ptr2str(@ffi.load32(return_area + 12))
      Option::Some(Response::{ json: result, uids: result4 })
    }
    _ => panic()
  }
  ignore(host_name)
  ignore(request.query.query)
  ignore(request.query.variables)
  @ffi.free(address)
  @ffi.free(return_area)
  cleanupList.each(fn(cleanup) { @ffi.free(cleanup.address) })
  ignore(ignoreList)
  return lifted
}

///| Alter the database schema
pub fn alter_schema(host_name : String, schema : String) -> String? {
  let return_area = @ffi.malloc(12)
  wasmImportAlterSchema(
    @ffi.str2ptr(host_name),
    host_name.iter().count(),
    @ffi.str2ptr(schema),
    schema.iter().count(),
    return_area,
  )
  let lifted : String? = match @ffi.load8_u(return_area + 0) {
    0 => Option::None
    1 => {
      ignore(@ffi.load32(return_area + 8))
      let result = @ffi.ptr2str(@ffi.load32(return_area + 4))
      Option::Some(result)
    }
    _ => panic()
  }
  ignore(host_name)
  ignore(schema)
  @ffi.free(return_area)
  return lifted
}

///| Drop an attribute from the schema
pub fn drop_attribute(host_name : String, attr : String) -> String? {
  let return_area = @ffi.malloc(12)
  wasmImportDropAttribute(
    @ffi.str2ptr(host_name),
    host_name.iter().count(),
    @ffi.str2ptr(attr),
    attr.iter().count(),
    return_area,
  )
  let lifted : String? = match @ffi.load8_u(return_area + 0) {
    0 => Option::None
    1 => {
      ignore(@ffi.load32(return_area + 8))
      let result = @ffi.ptr2str(@ffi.load32(return_area + 4))
      Option::Some(result)
    }
    _ => panic()
  }
  ignore(host_name)
  ignore(attr)
  @ffi.free(return_area)
  return lifted
}

///| Drop all data from the database
pub fn drop_all_data(host_name : String) -> String? {
  let return_area = @ffi.malloc(12)
  wasmImportDropAllData(
    @ffi.str2ptr(host_name),
    host_name.iter().count(),
    return_area,
  )
  let lifted : String? = match @ffi.load8_u(return_area + 0) {
    0 => Option::None
    1 => {
      ignore(@ffi.load32(return_area + 8))
      let result = @ffi.ptr2str(@ffi.load32(return_area + 4))
      Option::Some(result)
    }
    _ => panic()
  }
  ignore(host_name)
  @ffi.free(return_area)
  return lifted
}
