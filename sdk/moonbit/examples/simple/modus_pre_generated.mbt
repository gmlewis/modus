// Code generated by Modus. DO NOT EDIT.

fn main {}

pub fn __modus_log_message(message : String) -> Unit {
  log_message(message)
}

pub fn __modus_add(x : Int, y : Int) -> Int {
  add(x, y)
}

pub fn __modus_add3(a : Int, b : Int, c~ : Int = 0) -> Int {
  add3(a, b, c~)
}

pub fn __modus_add_n(args : Array[Int]) -> Int {
  add_n(args)
}

pub fn __modus_get_current_time(now~ : @wallClock.Datetime = @wallClock.now()) -> @time.PlainDateTime!Error {
  get_current_time!(now~)
}

pub fn __modus_get_current_time_formatted(now~ : @wallClock.Datetime = @wallClock.now()) -> String!Error {
  get_current_time_formatted!(now~)
}

pub fn __modus_get_full_name(first_name : String, last_name : String) -> String {
  get_full_name(first_name, last_name)
}

pub fn __modus_say_hello(name~ : String? = None) -> String {
  say_hello(name~)
}

pub fn __modus_get_person() -> Person {
  get_person()
}

pub fn __modus_get_random_person() -> Person {
  get_random_person()
}

pub fn __modus_get_people() -> Array[Person] {
  get_people()
}

pub fn __modus_get_name_and_age() -> (String, Int) {
  get_name_and_age()
}

pub fn __modus_test_normal_error(input : String) -> String!Error {
  test_normal_error!(input)
}

pub fn __modus_test_alternative_error(input : String) -> String {
  test_alternative_error(input)
}

pub fn __modus_test_abort() -> Unit {
  test_abort()
}

pub fn __modus_test_exit() -> Unit {
  test_exit()
}

pub fn __modus_test_logging() -> Unit {
  test_logging()
}

