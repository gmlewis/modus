package "gmlewis/modus/pkg/db"

import(
  "moonbitlang/core/json"
)

// Values
fn do_query(String, String, String, Json?) -> (Json?, UInt)!

fn execute(String, String, String, Json?) -> UInt!

fn host_execute_query(String, String, String, String) -> HostQueryResponse?

fn query[T : @json.FromJson](String, String, String, Json?) -> (Array[T], UInt)!

fn query_scalar[T : @json.FromJson](String, String, String, Json?) -> (T, UInt)!

// Types and methods
pub(all) type! DbError String
impl Eq for DbError
impl Show for DbError

pub(all) struct HostQueryResponse {
  error : String?
  result_json : String?
  rows_affected : UInt
}
impl Eq for HostQueryResponse
impl Show for HostQueryResponse
impl ToJson for HostQueryResponse
impl @json.FromJson for HostQueryResponse

// Type aliases

// Traits

