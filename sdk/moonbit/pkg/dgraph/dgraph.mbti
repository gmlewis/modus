package "gmlewis/modus/pkg/dgraph"

import(
  "moonbitlang/core/json"
)

// Values
fn alter_schema(String, String) -> Unit!

fn condition(String) -> Mutation

fn del_json(String) -> Mutation

fn del_nquads(String) -> Mutation

fn drop_all(String) -> Unit!

fn drop_attr(String, String) -> Unit!

fn escape_rdf(String) -> String

fn execute_mutations(String, Array[Mutation]) -> Response!

fn execute_query(String, Query, mutations~ : Array[Mutation] = ..) -> Response!

fn host_alter_schema(String, String) -> Unit!

fn host_drop_all_data(String) -> Unit!

fn host_drop_attribute(String, String) -> Unit!

fn host_execute_query(String, Request) -> Response?!

fn new_query(String, variables~ : Map[String, String] = ..) -> Query

fn set_json(String) -> Mutation

fn set_nquads(String) -> Mutation

// Types and methods
pub(all) type! DgraphError String
impl Eq for DgraphError
impl Show for DgraphError

pub(all) struct Mutation {
  set_json : String
  del_json : String
  set_nquads : String
  del_nquads : String
  condition : String
}
impl Eq for Mutation
impl Show for Mutation
impl ToJson for Mutation
impl @json.FromJson for Mutation

pub(all) struct Query {
  query : String
  variables : Map[String, String]
}
impl Eq for Query
impl Show for Query
impl ToJson for Query
impl @json.FromJson for Query

pub(all) struct Request {
  query : Query?
  mutations : Array[Mutation]?
}
impl Eq for Request
impl Show for Request
impl ToJson for Request
impl @json.FromJson for Request

pub(all) struct Response {
  json : String
  uids : Map[String, String]
}
impl Eq for Response
impl Show for Response
impl ToJson for Response
impl @json.FromJson for Response

// Type aliases

// Traits

