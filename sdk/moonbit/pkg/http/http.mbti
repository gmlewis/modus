package gmlewis/modus/pkg/http

alias @gmlewis/modus/wit/interface/httpClient as @httpClient
alias @moonbitlang/core/json as @json

// Values
fn fetch_url(String, options~ : Array[RequestOptions] = ..) -> Response!

// Types and methods
pub(all) struct Content {
  data : String
}
impl Content {
  json[T : @json.FromJson](Self) -> T!
  new(Json) -> Self
  text(Self) -> String
}
impl Eq for Content
impl Show for Content
impl ToJson for Content
impl @json.FromJson for Content

pub(all) struct Header {
  name : String
  values : Array[String]
}
impl Eq for Header
impl Show for Header
impl ToJson for Header
impl @json.FromJson for Header

pub(all) struct Headers {
  data : Map[String, Header]
}
impl Headers {
  append(Self, String, String) -> Unit
  entries(Self) -> Array[(String, String)]
  from_array(Array[Array[String]]) -> Self
  from_map(Map[String, String]) -> Self
  from_map_array(Map[String, Array[String]]) -> Self
  from_tuples(Array[(String, String)]) -> Self
  get(Self, String) -> String
  new() -> Self
}
impl Eq for Headers
impl Show for Headers
impl ToJson for Headers
impl @json.FromJson for Headers

pub(all) type! HttpError String
impl Eq for HttpError
impl Show for HttpError

pub(all) type Request @httpClient.Request
impl Request {
  clone(Self, Array[RequestOptions]) -> Self
  fetch(Self) -> Response!
  json[T : @json.FromJson](Self) -> T!
  new(String, options~ : Array[RequestOptions] = ..) -> Self
  text(Self) -> String
}

pub(all) enum RequestOptions {
  Method(String)
  HeaderArray(Array[Array[String]])
  HeaderMap(Map[String, String])
  HeaderMapArray(Map[String, Array[String]])
  HeaderTuples(Array[(String, String)])
  BodyString(String)
  BodyJson(Json)
}

pub(all) type Response @httpClient.Response
impl Response {
  json[T : @json.FromJson](Self) -> T!
  ok(Self) -> Bool
  text(Self) -> String
}

// Type aliases

// Traits

