package "gmlewis/modus/pkg/vectors"

import(
  "moonbitlang/core/bigint"
)

// Values
fn[T : Absoluteable] abs(Array[T]) -> Array[T]

fn[T : Absoluteable] abs_in_place(Array[T]) -> Unit

fn[T : Addable] add(Array[T], Array[T]) -> Array[T]

fn[T : Addable] add_in_place(Array[T], Array[T]) -> Unit

fn[T : Addable] add_number(Array[T], T) -> Array[T]

fn[T : Addable] add_number_in_place(Array[T], T) -> Unit

fn[T : Divideable] divide_number(Array[T], T) -> Array[T]

fn[T : Divideable] divide_number_in_place(Array[T], T) -> Unit

fn[T : Multipliable + Addable + FromInt] dot(Array[T], Array[T]) -> T

fn[T : Multipliable + SquareRootable + Addable + Subtractable + FromInt] euclidian_distance(Array[T], Array[T]) -> T

fn[T : Multipliable + Addable + SquareRootable + FromInt] magnitude(Array[T]) -> T

fn[T : Compare] max(Array[T]) -> T

fn[T : Addable + Divideable + FromInt] mean(Array[T]) -> T

fn[T : Compare] min(Array[T]) -> T

fn[T : Multipliable] multiply_number(Array[T], T) -> Array[T]

fn[T : Multipliable] multiply_number_in_place(Array[T], T) -> Unit

fn[T : Multipliable + Divideable + Addable + SquareRootable + FromInt] normalize(Array[T]) -> Array[T]

fn[T : Multipliable + FromInt] product(Array[T]) -> T

fn[T : Subtractable] sub(Array[T], Array[T]) -> Array[T]

fn[T : Subtractable] subtract_in_place(Array[T], Array[T]) -> Unit

fn[T : Subtractable] subtract_number(Array[T], T) -> Array[T]

fn[T : Subtractable] subtract_number_in_place(Array[T], T) -> Unit

fn[T : Addable + FromInt] sum(Array[T]) -> T

// Types and methods

// Type aliases

// Traits
pub(open) trait Absoluteable {
  abs(Self) -> Self
}
impl Absoluteable for Int
impl Absoluteable for Int64
impl Absoluteable for Float
impl Absoluteable for Double

pub(open) trait Addable {
  add(Self, Self) -> Self
}
impl Addable for Byte
impl Addable for Int
impl Addable for Int16
impl Addable for Int64
impl Addable for UInt
impl Addable for UInt16
impl Addable for UInt64
impl Addable for Float
impl Addable for Double
impl Addable for @bigint.BigInt

pub(open) trait Divideable : Div {
  op_div(Self, Self) -> Self
}
impl Divideable for Byte
impl Divideable for Int
impl Divideable for Int16
impl Divideable for Int64
impl Divideable for UInt
impl Divideable for UInt16
impl Divideable for UInt64
impl Divideable for Float
impl Divideable for Double
impl Divideable for @bigint.BigInt

pub(open) trait FromInt {
  from_int(Int) -> Self
}
impl FromInt for Int
impl FromInt for Float
impl FromInt for Double

pub(open) trait Multipliable : Mul {
  op_mul(Self, Self) -> Self
}
impl Multipliable for Byte
impl Multipliable for Int
impl Multipliable for Int16
impl Multipliable for Int64
impl Multipliable for UInt
impl Multipliable for UInt16
impl Multipliable for UInt64
impl Multipliable for Float
impl Multipliable for Double
impl Multipliable for @bigint.BigInt

pub(open) trait SquareRootable {
  sqrt(Self) -> Self
}
impl SquareRootable for Int
impl SquareRootable for Int64
impl SquareRootable for Float
impl SquareRootable for Double

pub(open) trait Subtractable {
  sub(Self, Self) -> Self
}
impl Subtractable for Byte
impl Subtractable for Int
impl Subtractable for Int16
impl Subtractable for Int64
impl Subtractable for UInt
impl Subtractable for UInt16
impl Subtractable for UInt64
impl Subtractable for Float
impl Subtractable for Double
impl Subtractable for @bigint.BigInt

