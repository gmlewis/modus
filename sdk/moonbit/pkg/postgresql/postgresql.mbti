package "gmlewis/modus/pkg/postgresql"

import(
  "moonbitlang/core/json"
)

// Values
fn execute(String, String, Json?) -> UInt raise

fn[T : @json.FromJson] query(String, String, Json?) -> (Array[T], UInt) raise

fn[T : @json.FromJson] query_scalar(String, String, Json?) -> (T, UInt) raise

// Types and methods
pub(all) struct Location {
  longitude : Double
  latitude : Double
}
fn Location::new(Double, Double) -> Self
fn Location::parse(String) -> Self raise
impl Eq for Location
impl Show for Location
impl ToJson for Location
impl @json.FromJson for Location

pub(all) struct Point {
  x : Double
  y : Double
}
fn Point::new(Double, Double) -> Self
fn Point::parse(String) -> Self raise
fn Point::to_string(Self) -> String
impl Eq for Point
impl Show for Point
impl ToJson for Point
impl @json.FromJson for Point

pub(all) suberror PostgreSqlError String
impl Eq for PostgreSqlError
impl Show for PostgreSqlError

// Type aliases

// Traits

