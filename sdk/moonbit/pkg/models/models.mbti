package "gmlewis/modus/pkg/models"

import(
  "moonbitlang/core/json"
)

// Values
fn get_model(String) -> ModelBase raise

fn host_get_model_info(String) -> ModelInfo raise

fn host_invoke_model(String, String) -> String raise

// Types and methods
pub(all) struct ModelBase {
  mut info : ModelInfo?
  debug : Bool
}
fn ModelBase::invoke(Self, Json) -> Json raise
impl Model for ModelBase
impl Eq for ModelBase
impl Show for ModelBase
impl ToJson for ModelBase
impl @json.FromJson for ModelBase

pub(all) struct ModelInfo {
  name : String
  full_name : String
}
impl Eq for ModelInfo
impl Show for ModelInfo
impl ToJson for ModelInfo
impl @json.FromJson for ModelInfo

pub(all) suberror ModelsError String
impl Eq for ModelsError
impl Show for ModelsError

// Type aliases

// Traits
pub(open) trait Model {
  info(Self) -> ModelInfo
}

