// Copyright 2024 Hypermode Inc.
// Licensed under the terms of the Apache License, Version 2.0
// See the LICENSE file that accompanied this code for further details.
//
// SPDX-FileCopyrightText: 2024 Hypermode Inc. <hello@hypermode.com>
// SPDX-License-Identifier: Apache-2.0

///| The models package provides a generic interface for invoking various AI models.

///| Model information record
pub(all) struct ModelInfo {
  name : String
  full_name : String
} derive(Show, Eq, FromJson, ToJson)

///| Provides a generic interface for interacting with an AI model.
pub(open) trait Model {
  info(Self) -> ModelInfo
  // invoke(Self, Json) -> Json!Error
}

// ///| Provides a generic interface for setting the model information (used internally).
// trait ModelPtr {
//   set_info(Self, ModelInfo) -> Unit
// }

///| Provides a base implementation for all models.
pub(all) struct ModelBase {
  mut info : ModelInfo?
  debug : Bool
} derive(Show, Eq, FromJson, ToJson)

///|
pub impl Model for ModelBase with info(self) {
  self.info.unwrap()
}

// ///|
// impl ModelPtr for ModelBase with set_info(self, info) { self.info = Some(info) }

///|
pub(all) suberror ModelsError String derive(Show, Eq)

///| Gets a model object instance, which can be used to interact with the model.
///   - The generic type parameter [TModel] is used to specify the API that the model adheres to.
///   - The name parameter is used to identify the model in the modus.json manifest file.
///
/// Note that of the generic type parameters, only [TModel] needs to be specified.  The others are inferred automatically.
pub fn get_model(name : String) -> ModelBase raise Error {
  let info = Some(host_get_model_info(name))
  ModelBase::{ info, debug: false }
}

///| Invokes the model with the specified input and returns the output generated by the model.
// pub impl Model for ModelBase with invoke(self, input_json) {
pub fn ModelBase::invoke(
  self : ModelBase,
  input_json : Json
) -> Json raise Error {
  if self.info.is_empty() {
    raise ModelsError(
      "model info is not set (use get_model to create a model instance)",
    )
  }

  //
  let model_name = self.info.unwrap().name
  let input = input_json.stringify()

  //
  if self.debug {
    @console.log("Invoking model \{model_name} with input: \{input}")
  }

  //
  let output = host_invoke_model(model_name, input)

  //
  if self.debug {
    @console.log("Received output for model \{model_name}: \{output}")
  }

  //
  @json.parse(output)
}
