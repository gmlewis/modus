// -*- compile-command: "go test -run ^TestFunction_String_Time$ ."; -*-

/*
 * Copyright 2024 Hypermode Inc.
 * Licensed under the terms of the Apache License, Version 2.0
 * See the LICENSE file that accompanied this code for further details.
 *
 * SPDX-FileCopyrightText: 2024 Hypermode Inc. <hello@hypermode.com>
 * SPDX-License-Identifier: Apache-2.0
 */

package metadata

import (
	_ "embed"
	"testing"
)

//go:embed testdata/time-example-metadata.json
var timeExampleMetadataJSON []byte

func TestFunction_String_Time(t *testing.T) {
	t.Parallel()

	tests := []functionStringTest{
		{name: "@base64.array2str", want: "(b : ArrayView[Byte]) -> String"},
		{name: "@base64.bytes2str", want: "(b : Bytes) -> String"},
		{name: "@base64.std_decode2bytes", want: "(src : String, no_padding~ : Bool) -> Bytes!CorruptInputError"},
		{name: "@base64.std_decode2str", want: "(src : String, no_padding~ : Bool) -> String!CorruptInputError"},
		{name: "@base64.std_encode2bytes", want: "(src : FixedArray[Byte], no_padding~ : Bool) -> Bytes"},
		{name: "@base64.std_encode2str", want: "(src : FixedArray[Byte], no_padding~ : Bool) -> String"},
		{name: "@base64.str2array", want: "(s : String) -> Array[Byte]"},
		{name: "@base64.str2bytes", want: "(s : String) -> Bytes"},
		{name: "@base64.url_decode2bytes", want: "(src : String, no_padding~ : Bool) -> Bytes!CorruptInputError"},
		{name: "@base64.url_decode2str", want: "(src : String, no_padding~ : Bool) -> String!CorruptInputError"},
		{name: "@base64.url_encode2bytes", want: "(src : FixedArray[Byte], no_padding~ : Bool) -> Bytes"},
		{name: "@base64.url_encode2str", want: "(src : FixedArray[Byte], no_padding~ : Bool) -> String"},
		{name: "@decoder.utf8", want: "(bytes : Iter[Byte]) -> Iter[Char]"},
		{name: "@encoder.utf8", want: "(string : Iter[Char]) -> Iter[Byte]"},
		{name: "@ffi.byte_array_from_extern", want: "(e : @ffi.XExternByteArray) -> Bytes"},
		{name: "@ffi.byte_array_to_extern", want: "(s : Bytes) -> @ffi.XExternByteArray"},
		{name: "@ffi.mbt_string_to_utf8_bytes", want: "(str : String, is_filename : Bool) -> Bytes"},
		{name: "@ffi.string_array_from_extern", want: "(e : @ffi.XExternStringArray) -> Array[String]"},
		{name: "@ffi.string_from_extern", want: "(e : @ffi.XExternString) -> String"},
		{name: "@ffi.string_to_extern", want: "(s : String) -> @ffi.XExternString"},
		{name: "@ffi.utf8_bytes_to_mbt_string", want: "(bytes : Bytes) -> String"},
		{name: "@localtime.get_local_time_modus", want: "() -> String"},
		{name: "@localtime.get_time_in_zone_modus", want: "(timezone : String) -> String"},
		{name: "@localtime.get_time_zone_data", want: "(timezone : String, format : String) -> FixedArray[Byte]"},
		{name: "@sys.exit", want: "(code : Int) -> Unit"},
		{name: "@sys.get_cli_args", want: "() -> Array[String]"},
		{name: "@sys.get_env_vars", want: "() -> Map[String, String]"},
		{name: "@sys.set_env_var", want: "(key : String, value : String) -> Unit"},
		{name: "@sys.unset_env_var", want: "(key : String) -> Unit"},
		{name: "@time.Duration::from_string", want: "(str : String) -> @time.Duration!Error"},
		{name: "@time.Duration::of", want: "(hours~ : Int64, minutes~ : Int64, seconds~ : Int64, nanoseconds~ : Int64) -> @time.Duration!Error"},
		{name: "@time.Duration::zero", want: "() -> @time.Duration"},
		{name: "@time.Period::from_string", want: "(str : String) -> @time.Period!Error"},
		{name: "@time.Period::is_neg", want: "(self : @time.Period) -> Bool"},
		{name: "@time.Period::is_zero", want: "(self : @time.Period) -> Bool"},
		{name: "@time.Period::of", want: "(years~ : Int, months~ : Int, days~ : Int) -> @time.Period"},
		{name: "@time.Period::op_add", want: "(self : @time.Period, other : @time.Period) -> @time.Period!Error"},
		{name: "@time.Period::to_string", want: "(self : @time.Period) -> String"},
		{name: "@time.Period::zero", want: "() -> @time.Period"},
		{name: "@time.PlainDate::add_days", want: "(self : @time.PlainDate, days : Int64) -> @time.PlainDate!Error"},
		{name: "@time.PlainDate::add_months", want: "(self : @time.PlainDate, months : Int64) -> @time.PlainDate!Error"},
		{name: "@time.PlainDate::add_period", want: "(self : @time.PlainDate, period : @time.Period) -> @time.PlainDate!Error"},
		{name: "@time.PlainDate::add_weeks", want: "(self : @time.PlainDate, weeks : Int64) -> @time.PlainDate!Error"},
		{name: "@time.PlainDate::add_years", want: "(self : @time.PlainDate, years : Int64) -> @time.PlainDate!Error"},
		{name: "@time.PlainDate::days_in_week", want: "(_self : @time.PlainDate) -> Int"},
		{name: "@time.PlainDate::from_string", want: "(str : String) -> @time.PlainDate!Error"},
		{name: "@time.PlainDate::from_unix_day", want: "(unix_day : Int64) -> @time.PlainDate!Error"},
		{name: "@time.PlainDate::from_year_ord", want: "(year : Int, ordinal : Int) -> @time.PlainDate!Error"},
		{name: "@time.PlainDate::months_in_year", want: "(_self : @time.PlainDate) -> Int"},
		{name: "@time.PlainDate::of", want: "(year : Int, month : Int, day : Int) -> @time.PlainDate!Error"},
		{name: "@time.PlainDate::to_string", want: "(self : @time.PlainDate) -> String"},
		{name: "@time.PlainDate::until", want: "(self : @time.PlainDate, end : @time.PlainDate) -> @time.Period!Error"},
		{name: "@time.PlainDateTime::add_days", want: "(self : @time.PlainDateTime, days : Int64) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::add_duration", want: "(self : @time.PlainDateTime, duration : @time.Duration) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::add_hours", want: "(self : @time.PlainDateTime, hours : Int64) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::add_minutes", want: "(self : @time.PlainDateTime, minutes : Int64) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::add_months", want: "(self : @time.PlainDateTime, months : Int64) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::add_nanoseconds", want: "(self : @time.PlainDateTime, nanoseconds : Int64) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::add_period", want: "(self : @time.PlainDateTime, period : @time.Period) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::add_seconds", want: "(self : @time.PlainDateTime, seconds : Int64) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::add_weeks", want: "(self : @time.PlainDateTime, weeks : Int64) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::add_years", want: "(self : @time.PlainDateTime, years : Int64) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::day", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::days_in_month", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::days_in_week", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::days_in_year", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::era", want: "(self : @time.PlainDateTime) -> String"},
		{name: "@time.PlainDateTime::era_year", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::from_string", want: "(str : String) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::from_unix_second", want: "(second : Int64, nanosecond : Int, offset : @time.ZoneOffset) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::hour", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::in_leap_year", want: "(self : @time.PlainDateTime) -> Bool"},
		{name: "@time.PlainDateTime::minute", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::month", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::months_in_year", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::nanosecond", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::of", want: "(year : Int, month : Int, day : Int, hour~ : Int, minute~ : Int, second~ : Int, nanosecond~ : Int) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::ordinal", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::second", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainDateTime::to_plain_date", want: "(self : @time.PlainDateTime) -> @time.PlainDate"},
		{name: "@time.PlainDateTime::to_plain_time", want: "(self : @time.PlainDateTime) -> @time.PlainTime"},
		{name: "@time.PlainDateTime::to_string", want: "(self : @time.PlainDateTime) -> String"},
		{name: "@time.PlainDateTime::weekday", want: "(self : @time.PlainDateTime) -> @time.Weekday"},
		{name: "@time.PlainDateTime::with_day", want: "(self : @time.PlainDateTime, day : Int) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::with_hour", want: "(self : @time.PlainDateTime, hour : Int) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::with_minute", want: "(self : @time.PlainDateTime, minute : Int) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::with_month", want: "(self : @time.PlainDateTime, month : Int) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::with_nanosecond", want: "(self : @time.PlainDateTime, nanosecond : Int) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::with_ordinal", want: "(self : @time.PlainDateTime, ordinal : Int) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::with_second", want: "(self : @time.PlainDateTime, second : Int) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::with_year", want: "(self : @time.PlainDateTime, year : Int) -> @time.PlainDateTime!Error"},
		{name: "@time.PlainDateTime::year", want: "(self : @time.PlainDateTime) -> Int"},
		{name: "@time.PlainTime::add_duration", want: "(self : @time.PlainTime, duration : @time.Duration) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::add_hours", want: "(self : @time.PlainTime, hours : Int64) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::add_minutes", want: "(self : @time.PlainTime, minutes : Int64) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::add_nanoseconds", want: "(self : @time.PlainTime, nanoseconds : Int64) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::add_seconds", want: "(self : @time.PlainTime, seconds : Int64) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::from_nanosecond_of_day", want: "(nanosecond : Int64) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::from_second_of_day", want: "(second : Int) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::from_string", want: "(str : String) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::hour", want: "(self : @time.PlainTime) -> Int"},
		{name: "@time.PlainTime::minute", want: "(self : @time.PlainTime) -> Int"},
		{name: "@time.PlainTime::nanosecond", want: "(self : @time.PlainTime) -> Int"},
		{name: "@time.PlainTime::of", want: "(hour : Int, minute : Int, second : Int, nanosecond : Int) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::second", want: "(self : @time.PlainTime) -> Int"},
		{name: "@time.PlainTime::to_string", want: "(self : @time.PlainTime) -> String"},
		{name: "@time.PlainTime::until", want: "(self : @time.PlainTime, end : @time.PlainTime) -> @time.Duration!Error"},
		{name: "@time.PlainTime::with_hour", want: "(self : @time.PlainTime, hour : Int) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::with_minute", want: "(self : @time.PlainTime, minute : Int) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::with_nanosecond", want: "(self : @time.PlainTime, nanosecond : Int) -> @time.PlainTime!Error"},
		{name: "@time.PlainTime::with_second", want: "(self : @time.PlainTime, second : Int) -> @time.PlainTime!Error"},
		{name: "@time.Zone::from_tzif2", want: "(id : String, data : FixedArray[Byte]) -> @time.Zone!Error"},
		{name: "@time.Zone::to_string", want: "(self : @time.Zone) -> String"},
		{name: "@time.ZoneOffset::abbreviation", want: "(self : @time.ZoneOffset) -> String"},
		{name: "@time.ZoneOffset::compare", want: "(self : @time.ZoneOffset, other : @time.ZoneOffset) -> Int"},
		{name: "@time.ZoneOffset::from_seconds", want: "(seconds : Int, abbrev~ : String, dst~ : Bool) -> @time.ZoneOffset!Error"},
		{name: "@time.ZoneOffset::of", want: "(hours~ : Int, minutes~ : Int, seconds~ : Int, abbrev~ : String, dst~ : Bool) -> @time.ZoneOffset!Error"},
		{name: "@time.ZoneOffset::op_equal", want: "(self : @time.ZoneOffset, other : @time.ZoneOffset) -> Bool"},
		{name: "@time.ZoneOffset::seconds", want: "(self : @time.ZoneOffset) -> Int"},
		{name: "@time.ZoneOffset::to_string", want: "(self : @time.ZoneOffset) -> String"},
		{name: "@time.ZonedDateTime::add_days", want: "(self : @time.ZonedDateTime, days : Int64) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::add_hours", want: "(self : @time.ZonedDateTime, hours : Int64) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::add_minutes", want: "(self : @time.ZonedDateTime, minutes : Int64) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::add_months", want: "(self : @time.ZonedDateTime, months : Int64) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::add_nanoseconds", want: "(self : @time.ZonedDateTime, nanoseconds : Int64) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::add_seconds", want: "(self : @time.ZonedDateTime, seconds : Int64) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::add_weeks", want: "(self : @time.ZonedDateTime, weeks : Int64) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::add_years", want: "(self : @time.ZonedDateTime, years : Int64) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::day", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::days_in_month", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::days_in_week", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::days_in_year", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::era", want: "(self : @time.ZonedDateTime) -> String"},
		{name: "@time.ZonedDateTime::era_year", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::from_plain_datetime", want: "(datetime : @time.PlainDateTime, zone~ : @time.Zone) -> @time.ZonedDateTime"},
		{name: "@time.ZonedDateTime::from_unix_second", want: "(second : Int64, nanosecond~ : Int, zone~ : @time.Zone) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::hour", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::in_leap_year", want: "(self : @time.ZonedDateTime) -> Bool"},
		{name: "@time.ZonedDateTime::minute", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::month", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::months_in_year", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::nanosecond", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::of", want: "(year : Int, month : Int, day : Int, hour~ : Int, minute~ : Int, second~ : Int, nanosecond~ : Int, zone~ : @time.Zone) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::ordinal", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::second", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.ZonedDateTime::to_plain_date", want: "(self : @time.ZonedDateTime) -> @time.PlainDate"},
		{name: "@time.ZonedDateTime::to_plain_date_time", want: "(self : @time.ZonedDateTime) -> @time.PlainDateTime"},
		{name: "@time.ZonedDateTime::to_plain_time", want: "(self : @time.ZonedDateTime) -> @time.PlainTime"},
		{name: "@time.ZonedDateTime::to_string", want: "(self : @time.ZonedDateTime) -> String"},
		{name: "@time.ZonedDateTime::to_unix_second", want: "(self : @time.ZonedDateTime) -> Int64"},
		{name: "@time.ZonedDateTime::weekday", want: "(self : @time.ZonedDateTime) -> @time.Weekday"},
		{name: "@time.ZonedDateTime::with_day", want: "(self : @time.ZonedDateTime, day : Int) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::with_hour", want: "(self : @time.ZonedDateTime, hour : Int) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::with_minute", want: "(self : @time.ZonedDateTime, minute : Int) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::with_month", want: "(self : @time.ZonedDateTime, month : Int) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::with_nanosecond", want: "(self : @time.ZonedDateTime, nanosecond : Int) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::with_ordinal", want: "(self : @time.ZonedDateTime, ordinal : Int) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::with_second", want: "(self : @time.ZonedDateTime, second : Int) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::with_year", want: "(self : @time.ZonedDateTime, year : Int) -> @time.ZonedDateTime!Error"},
		{name: "@time.ZonedDateTime::year", want: "(self : @time.ZonedDateTime) -> Int"},
		{name: "@time.add_days", want: "(self : @time.Period, days : Int) -> @time.Period!Error"},
		{name: "@time.add_duration", want: "(self : @time.Duration, other : @time.Duration) -> @time.Duration!Error"},
		{name: "@time.add_hours", want: "(self : @time.Duration, hours : Int64) -> @time.Duration!Error"},
		{name: "@time.add_minutes", want: "(self : @time.Duration, minutes : Int64) -> @time.Duration!Error"},
		{name: "@time.add_months", want: "(self : @time.Period, months : Int) -> @time.Period!Error"},
		{name: "@time.add_nanoseconds", want: "(self : @time.Duration, nanoseconds : Int64) -> @time.Duration!Error"},
		{name: "@time.add_period", want: "(self : @time.Period, other : @time.Period) -> @time.Period!Error"},
		{name: "@time.add_seconds", want: "(self : @time.Duration, seconds : Int64) -> @time.Duration!Error"},
		{name: "@time.add_weeks", want: "(self : @time.Period, weeks : Int) -> @time.Period!Error"},
		{name: "@time.add_years", want: "(self : @time.Period, years : Int) -> @time.Period!Error"},
		{name: "@time.at_date", want: "(self : @time.PlainTime, date : @time.PlainDate) -> @time.PlainDateTime"},
		{name: "@time.compare", want: "(self : @time.PlainDate, other : @time.PlainDate) -> Int"},
		{name: "@time.date_time", want: "(year : Int, month : Int, day : Int, hour~ : Int, minute~ : Int, second~ : Int, nanosecond~ : Int, zone~ : @time.Zone) -> @time.ZonedDateTime!Error"},
		{name: "@time.day", want: "(self : @time.PlainDate) -> Int"},
		{name: "@time.days", want: "(self : @time.Period) -> Int"},
		{name: "@time.days_in_month", want: "(self : @time.PlainDate) -> Int"},
		{name: "@time.days_in_year", want: "(self : @time.PlainDate) -> Int"},
		{name: "@time.era", want: "(self : @time.PlainDate) -> String"},
		{name: "@time.era_year", want: "(self : @time.PlainDate) -> Int"},
		{name: "@time.fixed_zone", want: "(id : String, offset_seconds : Int, abbrev~ : String, dst~ : Bool) -> @time.Zone!Error"},
		{name: "@time.id", want: "(self : @time.ZoneOffset) -> String"},
		{name: "@time.in_leap_year", want: "(self : @time.PlainDate) -> Bool"},
		{name: "@time.is_dst", want: "(self : @time.ZoneOffset) -> Bool"},
		{name: "@time.is_fixed", want: "(self : @time.Zone) -> Bool"},
		{name: "@time.is_neg", want: "(self : @time.Duration) -> Bool"},
		{name: "@time.is_zero", want: "(self : @time.Duration) -> Bool"},
		{name: "@time.month", want: "(self : @time.PlainDate) -> Int"},
		{name: "@time.months", want: "(self : @time.Period) -> Int"},
		{name: "@time.multiply", want: "(self : @time.Period, n : Int) -> @time.Period!Error"},
		{name: "@time.nanosecond_of_day", want: "(self : @time.PlainTime) -> Int64"},
		{name: "@time.nanoseconds", want: "(self : @time.Duration) -> Int"},
		{name: "@time.negated", want: "(self : @time.Period) -> @time.Period!Error"},
		{name: "@time.offset", want: "(self : @time.ZonedDateTime) -> @time.ZoneOffset"},
		{name: "@time.op_add", want: "(self : @time.Duration, other : @time.Duration) -> @time.Duration!Error"},
		{name: "@time.op_equal", want: "(self : @time.PlainDate, other : @time.PlainDate) -> Bool"},
		{name: "@time.op_sub", want: "(self : @time.Period, other : @time.Period) -> @time.Period!Error"},
		{name: "@time.ordinal", want: "(self : @time.PlainDate) -> Int"},
		{name: "@time.second_of_day", want: "(self : @time.PlainTime) -> Int"},
		{name: "@time.seconds", want: "(self : @time.Duration) -> Int64"},
		{name: "@time.to_nanoseconds", want: "(self : @time.Duration) -> Int64"},
		{name: "@time.to_string", want: "(self : @time.Duration) -> String"},
		{name: "@time.to_total_months", want: "(self : @time.Period) -> Int64"},
		{name: "@time.to_unix_day", want: "(self : @time.PlainDate) -> Int64"},
		{name: "@time.to_unix_second", want: "(self : @time.PlainDateTime) -> Int64"},
		{name: "@time.unix", want: "(second : Int64, nanosecond~ : Int, zone~ : @time.Zone) -> @time.ZonedDateTime!Error"},
		{name: "@time.weekday", want: "(self : @time.PlainDate) -> @time.Weekday"},
		{name: "@time.with_day", want: "(self : @time.PlainDate, day : Int) -> @time.PlainDate!Error"},
		{name: "@time.with_days", want: "(self : @time.Period, days : Int) -> @time.Period"},
		{name: "@time.with_month", want: "(self : @time.PlainDate, month : Int) -> @time.PlainDate!Error"},
		{name: "@time.with_months", want: "(self : @time.Period, months : Int) -> @time.Period"},
		{name: "@time.with_nanoseconds", want: "(self : @time.Duration, nanoseconds : Int) -> @time.Duration!Error"},
		{name: "@time.with_ordinal", want: "(self : @time.PlainDate, ordinal : Int) -> @time.PlainDate!Error"},
		{name: "@time.with_seconds", want: "(self : @time.Duration, seconds : Int64) -> @time.Duration"},
		{name: "@time.with_year", want: "(self : @time.PlainDate, year : Int) -> @time.PlainDate!Error"},
		{name: "@time.with_years", want: "(self : @time.Period, years : Int) -> @time.Period"},
		{name: "@time.year", want: "(self : @time.PlainDate) -> Int"},
		{name: "@time.years", want: "(self : @time.Period) -> Int"},
		{name: "@time.zone", want: "(self : @time.ZonedDateTime) -> @time.Zone"},
		{name: "@wasi.clock_res_get", want: "(clockid : UInt) -> Result[UInt64, UInt]"},
		{name: "@wasi.clock_time_get", want: "(clockid : UInt, precision : UInt64) -> Result[UInt64, UInt]"},
		{name: "@wasi.environ_get", want: "(name : String) -> String"},
		{name: "@wasi.environ_sizes_get", want: "() -> @wasi.(Int, Int, Int)"},
		{name: "@wasi.now", want: "() -> Int64"},
		{name: "@wasi.random_get", want: "(buf : String, buf_len : UInt) -> Result[Unit, UInt]"},
		{name: "get_local_time_modus", want: "() -> String"},
		{name: "get_local_time_moonbit", want: "() -> String!Error"},
		{name: "get_local_time_zone_id", want: "() -> String"},
		{name: "get_time_in_zone_modus", want: "(tz : String) -> String"},
		{name: "get_time_in_zone_moonbit", want: "(tz : String) -> String!Error"},
		{name: "get_time_zone_info", want: "(tz : String) -> TimeZoneInfo!Error"},
		{name: "get_utc_time", want: "() -> @time.ZonedDateTime!Error"},
	}

	testFunctionStringHelper(t, "time", timeExampleMetadataJSON, tests)
}
