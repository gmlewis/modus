{
  "plugin": "simple-example",
  "module": "@simple-example",
  "sdk": "modus-sdk-mbt@40.11.0",
  "buildId": "cv2gtqnrack4be1cib70",
  "buildTs": "2025-03-03T02:07:38.682Z",
  "gitRepo": "https://github.com/gmlewis/modus",
  "gitCommit": "27b4b69f661b7300e7b4821a15dcd43ddc21e6ad",
  "fnExports": {
    "add": {
      "parameters": [
        {
          "name": "x",
          "type": "Int"
        },
        {
          "name": "y",
          "type": "Int"
        }
      ],
      "results": [
        {
          "type": "Int"
        }
      ],
      "docs": {
        "lines": [
          "Adds two integers together and returns the result."
        ]
      }
    },
    "add3": {
      "parameters": [
        {
          "name": "a",
          "type": "Int"
        },
        {
          "name": "b",
          "type": "Int"
        },
        {
          "name": "c~",
          "type": "Int"
        }
      ],
      "results": [
        {
          "type": "Int"
        }
      ],
      "docs": {
        "lines": [
          "Adds three integers together and returns the result.",
          "The third integer is optional."
        ]
      }
    },
    "add3_WithDefaults": {
      "parameters": [
        {
          "name": "a",
          "type": "Int"
        },
        {
          "name": "b",
          "type": "Int"
        }
      ],
      "results": [
        {
          "type": "Int"
        }
      ],
      "docs": {
        "lines": [
          "Adds three integers together and returns the result.",
          "The third integer is optional."
        ]
      }
    },
    "add_n": {
      "parameters": [
        {
          "name": "args",
          "type": "Array[Int]"
        }
      ],
      "results": [
        {
          "type": "Int"
        }
      ],
      "docs": {
        "lines": [
          "Adds any number of integers together and returns the result."
        ]
      }
    },
    "get_current_time": {
      "parameters": [
        {
          "name": "now~",
          "type": "@wallClock.Datetime"
        }
      ],
      "results": [
        {
          "type": "@time.ZonedDateTime!Error"
        }
      ],
      "docs": {
        "lines": [
          "Returns the current time."
        ]
      }
    },
    "get_current_time_WithDefaults": {
      "results": [
        {
          "type": "@time.ZonedDateTime!Error"
        }
      ],
      "docs": {
        "lines": [
          "Returns the current time."
        ]
      }
    },
    "get_current_time_formatted": {
      "parameters": [
        {
          "name": "now~",
          "type": "@wallClock.Datetime"
        }
      ],
      "results": [
        {
          "type": "String!Error"
        }
      ],
      "docs": {
        "lines": [
          "Returns the current time formatted as a string."
        ]
      }
    },
    "get_current_time_formatted_WithDefaults": {
      "results": [
        {
          "type": "String!Error"
        }
      ],
      "docs": {
        "lines": [
          "Returns the current time formatted as a string."
        ]
      }
    },
    "get_full_name": {
      "parameters": [
        {
          "name": "first_name",
          "type": "String"
        },
        {
          "name": "last_name",
          "type": "String"
        }
      ],
      "results": [
        {
          "type": "String"
        }
      ],
      "docs": {
        "lines": [
          "Combines the first and last name of a person, and returns the full name."
        ]
      }
    },
    "get_name_and_age": {
      "results": [
        {
          "type": "(String, Int)"
        }
      ],
      "docs": {
        "lines": [
          "Gets the name and age of a person."
        ]
      }
    },
    "get_people": {
      "results": [
        {
          "type": "Array[Person]"
        }
      ],
      "docs": {
        "lines": [
          "Gets a list of people."
        ]
      }
    },
    "get_person": {
      "results": [
        {
          "type": "Person"
        }
      ],
      "docs": {
        "lines": [
          "Gets a person object."
        ]
      }
    },
    "get_random_person": {
      "results": [
        {
          "type": "Person"
        }
      ],
      "docs": {
        "lines": [
          "Gets a random person object from a list of people."
        ]
      }
    },
    "log_message": {
      "parameters": [
        {
          "name": "message",
          "type": "String"
        }
      ],
      "docs": {
        "lines": [
          "Logs a message."
        ]
      }
    },
    "say_hello": {
      "parameters": [
        {
          "name": "name~",
          "type": "String?"
        }
      ],
      "results": [
        {
          "type": "String"
        }
      ],
      "docs": {
        "lines": [
          "Says hello to a person by name.",
          "If the name is not provided, it will say hello without a name."
        ]
      }
    },
    "say_hello_WithDefaults": {
      "results": [
        {
          "type": "String"
        }
      ],
      "docs": {
        "lines": [
          "Says hello to a person by name.",
          "If the name is not provided, it will say hello without a name."
        ]
      }
    },
    "test_abort": {
      "docs": {
        "lines": [
          "Tests an abort."
        ]
      }
    },
    "test_alternative_error": {
      "parameters": [
        {
          "name": "input",
          "type": "String"
        }
      ],
      "results": [
        {
          "type": "String"
        }
      ],
      "docs": {
        "lines": [
          "Tests an alternative way to handle errors in functions."
        ]
      }
    },
    "test_exit": {
      "docs": {
        "lines": [
          "Tests an exit with a non-zero exit code."
        ]
      }
    },
    "test_logging": {
      "docs": {
        "lines": [
          "Tests logging at different levels."
        ]
      }
    },
    "test_normal_error": {
      "parameters": [
        {
          "name": "input",
          "type": "String"
        }
      ],
      "results": [
        {
          "type": "String!Error"
        }
      ],
      "docs": {
        "lines": [
          "Tests returning an error."
        ]
      }
    }
  },
  "fnImports": {
    "modus_system.getTimeInZone": {
      "parameters": [
        {
          "name": "tz",
          "type": "String"
        }
      ],
      "results": [
        {
          "type": "String"
        }
      ]
    },
    "modus_system.getTimeZoneData": {
      "parameters": [
        {
          "name": "tz",
          "type": "String"
        },
        {
          "name": "format",
          "type": "String"
        }
      ],
      "results": [
        {
          "type": "Array[Byte]"
        }
      ]
    },
    "modus_system.logMessage": {
      "parameters": [
        {
          "name": "level",
          "type": "String"
        },
        {
          "name": "message",
          "type": "String"
        }
      ]
    }
  },
  "types": {
    "(String)": {
      "id": 4,
      "fields": [
        {
          "name": "0",
          "type": "String"
        }
      ]
    },
    "(String, Int)": {
      "id": 5,
      "fields": [
        {
          "name": "0",
          "type": "String"
        },
        {
          "name": "1",
          "type": "Int"
        }
      ]
    },
    "@time.ZonedDateTime": {
      "id": 6
    },
    "@time.ZonedDateTime!Error": {
      "id": 7
    },
    "@wallClock.Datetime": {
      "id": 8
    },
    "Array[Byte]": {
      "id": 9
    },
    "Array[Int]": {
      "id": 10
    },
    "Array[Person]": {
      "id": 11
    },
    "Int": {
      "id": 12
    },
    "Person": {
      "id": 13,
      "fields": [
        {
          "name": "firstName",
          "type": "String"
        },
        {
          "name": "lastName",
          "type": "String"
        },
        {
          "name": "age",
          "type": "Int"
        }
      ]
    },
    "String": {
      "id": 14
    },
    "String!Error": {
      "id": 15
    },
    "String?": {
      "id": 16
    }
  }
}