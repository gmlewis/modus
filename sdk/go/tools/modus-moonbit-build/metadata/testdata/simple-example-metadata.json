{
  "plugin": "simple-example",
  "module": "@simple-example",
  "sdk": "modus-sdk-mbt@0.16.5",
  "buildId": "cv8mrhvrackaht3o9cj0",
  "buildTs": "2025-03-12T11:19:35.655Z",
  "gitRepo": "https://github.com/gmlewis/modus",
  "gitCommit": "d912fcac5843aac02ea73c3317c3058a00ce358e",
  "fnExports": {
    "add": {
      "parameters": [
        {
          "name": "x",
          "type": "Int"
        },
        {
          "name": "y",
          "type": "Int"
        }
      ],
      "results": [
        {
          "type": "Int"
        }
      ],
      "docs": {
        "lines": [
          "Adds two integers together and returns the result."
        ]
      }
    },
    "add3": {
      "parameters": [
        {
          "name": "a",
          "type": "Int"
        },
        {
          "name": "b",
          "type": "Int"
        },
        {
          "name": "c~",
          "type": "Int"
        }
      ],
      "results": [
        {
          "type": "Int"
        }
      ],
      "docs": {
        "lines": [
          "Adds three integers together and returns the result.",
          "The third integer is optional."
        ]
      }
    },
    "add3_WithDefaults": {
      "parameters": [
        {
          "name": "a",
          "type": "Int"
        },
        {
          "name": "b",
          "type": "Int"
        }
      ],
      "results": [
        {
          "type": "Int"
        }
      ],
      "docs": {
        "lines": [
          "Adds three integers together and returns the result.",
          "The third integer is optional."
        ]
      }
    },
    "add_n": {
      "parameters": [
        {
          "name": "args",
          "type": "Array[Int]"
        }
      ],
      "results": [
        {
          "type": "Int"
        }
      ],
      "docs": {
        "lines": [
          "Adds any number of integers together and returns the result."
        ]
      }
    },
    "get_current_time": {
      "results": [
        {
          "type": "@time.ZonedDateTime!Error"
        }
      ],
      "docs": {
        "lines": [
          "Returns the current time."
        ]
      }
    },
    "get_current_time_formatted": {
      "results": [
        {
          "type": "String!Error"
        }
      ],
      "docs": {
        "lines": [
          "Returns the current time formatted as a string."
        ]
      }
    },
    "get_full_name": {
      "parameters": [
        {
          "name": "first_name",
          "type": "String"
        },
        {
          "name": "last_name",
          "type": "String"
        }
      ],
      "results": [
        {
          "type": "String"
        }
      ],
      "docs": {
        "lines": [
          "Combines the first and last name of a person, and returns the full name."
        ]
      }
    },
    "get_people": {
      "results": [
        {
          "type": "Array[Person]"
        }
      ],
      "docs": {
        "lines": [
          "Gets a list of people."
        ]
      }
    },
    "get_person": {
      "results": [
        {
          "type": "Person"
        }
      ],
      "docs": {
        "lines": [
          "Gets a person object."
        ]
      }
    },
    "get_random_person": {
      "results": [
        {
          "type": "Person"
        }
      ],
      "docs": {
        "lines": [
          "Gets a random person object from a list of people."
        ]
      }
    },
    "log_message": {
      "parameters": [
        {
          "name": "message",
          "type": "String"
        }
      ],
      "docs": {
        "lines": [
          "Logs a message."
        ]
      }
    },
    "test_abort": {
      "docs": {
        "lines": [
          "Tests an abort."
        ]
      }
    },
    "test_alternative_error": {
      "parameters": [
        {
          "name": "input",
          "type": "String"
        }
      ],
      "results": [
        {
          "type": "String"
        }
      ],
      "docs": {
        "lines": [
          "Tests an alternative way to handle errors in functions."
        ]
      }
    },
    "test_exit": {
      "docs": {
        "lines": [
          "Tests an exit with a non-zero exit code."
        ]
      }
    },
    "test_logging": {
      "docs": {
        "lines": [
          "Tests logging at different levels."
        ]
      }
    },
    "test_normal_error": {
      "parameters": [
        {
          "name": "input",
          "type": "String"
        }
      ],
      "results": [
        {
          "type": "String!Error"
        }
      ],
      "docs": {
        "lines": [
          "Tests returning an error."
        ]
      }
    }
  },
  "fnImports": {
    "modus_system.logMessage": {
      "parameters": [
        {
          "name": "level",
          "type": "String"
        },
        {
          "name": "message",
          "type": "String"
        }
      ]
    }
  },
  "types": {
    "(Int, Int, Int)": {
      "id": 4,
      "fields": [
        {
          "name": "0",
          "type": "Int"
        },
        {
          "name": "1",
          "type": "Int"
        },
        {
          "name": "2",
          "type": "Int"
        }
      ]
    },
    "(String)": {
      "id": 5,
      "fields": [
        {
          "name": "0",
          "type": "String"
        }
      ]
    },
    "@ffi.XExternByteArray": {
      "id": 6
    },
    "@ffi.XExternString": {
      "id": 7
    },
    "@ffi.XExternStringArray": {
      "id": 8
    },
    "@testutils.CallStack[T]": {
      "id": 9,
      "fields": [
        {
          "name": "items",
          "type": "Array[Array[@testutils.T]]"
        }
      ]
    },
    "@testutils.T": {
      "id": 10
    },
    "@time.Duration": {
      "id": 11
    },
    "@time.Duration!Error": {
      "id": 12
    },
    "@time.Period": {
      "id": 13
    },
    "@time.Period!Error": {
      "id": 14
    },
    "@time.PlainDate": {
      "id": 15
    },
    "@time.PlainDate!Error": {
      "id": 16
    },
    "@time.PlainDateTime": {
      "id": 17
    },
    "@time.PlainDateTime!Error": {
      "id": 18
    },
    "@time.PlainTime": {
      "id": 19
    },
    "@time.PlainTime!Error": {
      "id": 20
    },
    "@time.Weekday": {
      "id": 21
    },
    "@time.Zone": {
      "id": 22
    },
    "@time.Zone!Error": {
      "id": 23
    },
    "@time.ZoneOffset": {
      "id": 24
    },
    "@time.ZoneOffset!Error": {
      "id": 25
    },
    "@time.ZonedDateTime": {
      "id": 26
    },
    "@time.ZonedDateTime!Error": {
      "id": 27
    },
    "ArrayView[Byte]": {
      "id": 28
    },
    "Array[@testutils.T]": {
      "id": 29
    },
    "Array[Byte]": {
      "id": 30
    },
    "Array[Int]": {
      "id": 31
    },
    "Array[Person]": {
      "id": 32
    },
    "Array[String]": {
      "id": 33
    },
    "Bool": {
      "id": 34
    },
    "Byte": {
      "id": 35
    },
    "Bytes": {
      "id": 36
    },
    "Bytes!Error": {
      "id": 37
    },
    "FixedArray[Byte]": {
      "id": 38
    },
    "Int": {
      "id": 39
    },
    "Int64": {
      "id": 40
    },
    "Iter[Byte]": {
      "id": 41
    },
    "Iter[Char]": {
      "id": 42
    },
    "Map[String, String]": {
      "id": 43
    },
    "Person": {
      "id": 44,
      "fields": [
        {
          "name": "firstName",
          "type": "String"
        },
        {
          "name": "lastName",
          "type": "String"
        },
        {
          "name": "age",
          "type": "Int"
        }
      ]
    },
    "Result[UInt64, UInt]": {
      "id": 45
    },
    "Result[Unit, UInt]": {
      "id": 46
    },
    "String": {
      "id": 47
    },
    "String!Error": {
      "id": 48
    },
    "UInt": {
      "id": 49
    },
    "UInt64": {
      "id": 50
    }
  }
}