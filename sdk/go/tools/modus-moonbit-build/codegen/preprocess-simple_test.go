// -*- compile-command: "go test -run ^TestTestablePreProcess_Simple ."; -*-

/*
 * Copyright 2024 Hypermode Inc.
 * Licensed under the terms of the Apache License, Version 2.0
 * See the LICENSE file that accompanied this code for further details.
 *
 * SPDX-FileCopyrightText: 2024 Hypermode Inc. <hello@hypermode.com>
 * SPDX-License-Identifier: Apache-2.0
 */

package codegen

import (
	"testing"

	"github.com/gmlewis/modus/sdk/go/tools/modus-moonbit-build/config"
)

func TestTestablePreProcess_Simple(t *testing.T) {
	t.Parallel()

	config := &config.Config{
		SourceDir: "../testdata/simple-example",
	}

	mod := preProcessTestSetup(t, config)

	body, header, moonPkgJSON, err := testablePreProcess(config, mod)
	if err != nil {
		t.Fatal(err)
	}

	wg := &preProcessDiffs{
		wantPreProcessBody:        wantSimplePreProcessBody,
		gotPreProcessBody:         body.String(),
		wantPreProcessHeader:      wantSimplePreProcessHeader,
		gotPreProcessHeader:       header.String(),
		wantPreProcessMoonPkgJSON: wantSimplePreProcessMoonPkgJSON,
		gotPreProcessMoonPkgJSON:  moonPkgJSON.String(),
	}
	reportPreProcessDiffs(t, "simple", wg)
}

var wantSimplePreProcessBody = `pub fn __modus_log_message(message : String) -> Unit {
  log_message(message)
}

pub fn __modus_add(x : Int, y : Int) -> Int {
  add(x, y)
}

pub fn __modus_add3(a : Int, b : Int, c : Int) -> Int {
  add3(a, b, c~)
}

pub fn __modus_add3_WithDefaults(a : Int, b : Int) -> Int {
  add3(a, b)
}

pub fn __modus_add_n(args : Array[Int]) -> Int {
  add_n(args)
}

pub fn __modus_get_current_time() -> @time.ZonedDateTime!Error {
  try get_current_time!() {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

pub fn __modus_get_current_time_formatted() -> String!Error {
  try get_current_time_formatted!() {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

pub fn __modus_get_full_name(first_name : String, last_name : String) -> String {
  get_full_name(first_name, last_name)
}

pub fn __modus_get_person() -> Person {
  get_person()
}

pub fn __modus_get_random_person() -> Person {
  get_random_person()
}

pub fn __modus_get_people() -> Array[Person] {
  get_people()
}

pub fn __modus_test_normal_error(input : String) -> String!Error {
  try test_normal_error!(input) {
    e => {
      @console.error(e.to_string())
      raise e
    }
  }
}

pub fn __modus_test_alternative_error(input : String) -> String {
  test_alternative_error(input)
}

pub fn __modus_test_abort() -> Unit {
  test_abort()
}

pub fn __modus_test_exit() -> Unit {
  test_exit()
}

pub fn __modus_test_logging() -> Unit {
  test_logging()
}

`

var wantSimplePreProcessHeader = `// Code generated by modus-moonbit-build. DO NOT EDIT.

`

var wantSimplePreProcessMoonPkgJSON = `{
  "import": [
    "gmlewis/modus/pkg/console",
    "gmlewis/modus/wit/interface/wasi",
    "moonbitlang/x/sys",
    "moonbitlang/x/time"
  ],
  "test-import": [
    "gmlewis/modus/pkg/testutils"
  ],
  "targets": {
    "modus_post_generated.mbt": [
      "wasm"
    ]
  },
  "link": {
    "wasm": {
      "exports": [
        "__modus_add3:add3",
        "__modus_add3_WithDefaults:add3_WithDefaults",
        "__modus_add:add",
        "__modus_add_n:add_n",
        "__modus_get_current_time:get_current_time",
        "__modus_get_current_time_formatted:get_current_time_formatted",
        "__modus_get_full_name:get_full_name",
        "__modus_get_people:get_people",
        "__modus_get_person:get_person",
        "__modus_get_random_person:get_random_person",
        "__modus_log_message:log_message",
        "__modus_test_abort:test_abort",
        "__modus_test_alternative_error:test_alternative_error",
        "__modus_test_exit:test_exit",
        "__modus_test_logging:test_logging",
        "__modus_test_normal_error:test_normal_error",
        "cabi_realloc",
        "copy",
        "duration_from_nanos",
        "free",
        "load32",
        "malloc",
        "ptr2str",
        "ptr_to_none",
        "read_map",
        "store32",
        "store8",
        "write_map",
        "zoned_date_time_from_unix_seconds_and_nanos"
      ],
      "export-memory-name": "memory"
    }
  }
}`
